#
# https://github.com/P3TERX/Actions-OpenWrt

name: Build LEDE x86_64 Base System

on:
  repository_dispatch:
    types: [build_lede_base]
  workflow_dispatch:

permissions:
  contents: write

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  OPENWRT_DIR: lede
  REPO_BRANCH: master
  DEVICE_ARCH: x86_64
  FEEDS_CONF:  conf_base_lede-x86_64/feeds.conf.default
  CONFIG_FILE: conf_base_lede-x86_64/.config
  DIY_P1_SH:   conf_base_lede-x86_64/diy-part1.sh
  DIY_P2_SH:   conf_base_lede-x86_64/diy-part2.sh
  UPLOAD_BIN_DIR:    false
  UPLOAD_FIRMWARE:   false
  UPLOAD_RELEASE:    true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo "云编译建议取消勾选Node.js及其相关插件！"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 下载固件源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH $OPENWRT_DIR
        ln -sf /mnt/workdir/$OPENWRT_DIR $GITHUB_WORKSPACE/$OPENWRT_DIR

    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.DEVICE_ARCH }}
        prefix: ${{ github.workspace }}/${{ env.OPENWRT_DIR }}

    - name: 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRT_DIR/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd $OPENWRT_DIR
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新安装 feeds
      run: |
        cd $OPENWRT_DIR
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_DIR/.config
        chmod +x $DIY_P2_SH
        cd $OPENWRT_DIR
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载软件包
      id: package
      run: |
        cd $OPENWRT_DIR
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd $OPENWRT_DIR
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "OPENWRT_VAR=$(echo $OPENWRT_DIR | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV

    - name: 编译扩展 ipk
      run: |
        cd $OPENWRT_DIR
        make package/compile

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ env.OPENWRT_VAR }}_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_DIR }}/bin

    - name: 整理文件
      id: organize
      if: (env.UPLOAD_FIRMWARE == 'true' || env.UPLOAD_RELEASE == 'true') && (!cancelled())
      run: |
        tar --transform='s,.*/,,g' -cvf $OPENWRT_DIR/config.tar $OPENWRT_DIR/.config

        cd $OPENWRT_DIR/bin/targets/*/*
        rm -rf packages
        rm -rf *.buildinfo
        rm -rf profiles.json
        rm -rf *.manifest
        rm -rf *-kernel.bin
        rm -rf *-rootfs.img
        rm -rf *-rootfs.img.gz
        rm -rf sha256sums
        sha256sum * >> sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled() && (env.UPLOAD_BIN_DIR != 'true' && env.UPLOAD_FIRMWARE == 'true')
      with:
        name: ${{ env.OPENWRT_VAR }}_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成 release 标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.OPENWRT_VAR }}-${{ env.DEVICE_ARCH }}-${{ env.TAG_DATE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.OPENWRT_DIR}}/config.tar
          ${{ env.OPENWRT_DIR}}/bin/**/*.ipk
          ${{ env.FIRMWARE }}/*

